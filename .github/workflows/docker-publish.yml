name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: image

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile
          fi

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'version: '2'

services:

  dnsmasq:

    container_name: dnsmasq

    image: lan-cache/dnsmasq

    build: ./docker-dnsmasq

    network_mode: "host"

    ports:

    - "53:53"

    - "53:53/udp"

    volumes:

    - ./docker-dnsmasq/start-dnsmasq.sh:/usr/bin/start-dnsmasq.sh

    - ./data/conf:/etc/dnsmasq.template.d

    - ./data/dnsmasq.conf:/etc/dnsmasq.conf

    restart: unless-stopped

    stdin_open: true

    tty: true

    dns: 8.8.8.8

  nginx:

    container_name: nginx

    image: lan-cache/nginx

    build: ./docker-nginx

    network_mode: "host"

    ports:

    - "80:80"

    volumes:

    - ./docker-nginx/start-nginx.sh:/usr/bin/start-nginx.sh

    - ./data/conf:/etc/nginx/conf.d

    - ./data/nginx.conf:/etc/nginx/nginx.conf

    - ./data/cache:/cache

    - ./data/logs:/var/log/nginx

    restart: unless-stopped

  sniproxy:

    container_name: sniproxy

    image: lan-cache/sniproxy

    build: ./docker-sniproxy

    network_mode: "host"

    ports:

    - "443:443"

    volumes:

    - ./data/sniproxy.conf:/etc/sniproxy.conf

    restart: unless-stopped

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
